// The Gradle plugin currently expects the native libraries prepackaged in a
// jar in the libs directory.

buildscript {
    repositories {
        flatDir { dirs '../../../../lib' } // For the DexGuard plugin.
        jcenter()                       // For the Android plugin.
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath ':dexguard:'
    }
}

allprojects {
    ext {
        gdxVersion = "1.9.2"
    }

    repositories {
        mavenLocal();
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'dexguard'

android {
    buildToolsVersion "23.0.2"
    compileSdkVersion 23

    signingConfigs {
        debug {
            storeFile     file('../../../debug.keystore')
            storePassword 'android'
            keyAlias      'androiddebugkey'
            keyPassword   'android'
        }
    }

    defaultConfig {
        signingConfig signingConfigs.debug
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs         = ['src']
            resources.srcDirs    = ['src']
            aidl.srcDirs         = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs          = ['res']
            assets.srcDirs       = ['assets']
            jniLibs.srcDirs      = ['libs']
        }

        instrumentTest.setRoot('tests')
    }

    buildTypes {
        debug {
            proguardFile getDefaultDexGuardFile('dexguard-debug.pro')
            proguardFile 'dexguard-project.txt'
            //proguardFile 'dexguard-project-debug.txt'
            proguardFile 'proguard-project.txt'
        }
        release {
            proguardFile getDefaultDexGuardFile('dexguard-release.pro')
            proguardFile 'dexguard-project.txt'
            //proguardFile 'dexguard-project-release.txt'
            proguardFile 'proguard-project.txt'
        }
    }
}

configurations { natives }

dependencies {
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"

    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
}

task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null)
        {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
